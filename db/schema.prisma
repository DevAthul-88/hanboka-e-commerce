generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  email          String     @unique
  hashedPassword String?
  role           String     @default("USER")
  productId      String?
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  reviews        Review[]
  sessions       Session[]
  tokens         Token[]
  wishlist       Product[]  @relation("UserWishlist")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model Address {
  id         Int     @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  text       String
  user       User    @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  nameKorean  String?
  slug        String     @unique
  description String?
  imageUrl    String?
  parentId    Int?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]

  @@index([parentId])
}

model Product {
  id               Int            @id @default(autoincrement())
  sku              String         @unique
  name             String
  nameKorean       String?
  slug             String         @unique
  description      String
  price            Float
  salePrice        Float?
  gender           String
  style            String
  colorId          Int?
  categoryId       Int
  stock            Int
  isActive         Boolean        @default(true)
  isFeatured       Boolean        @default(false)
  weight           Float?
  dimensions       String?
  material         String?
  careInstructions String?
  tags             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
  category         Category       @relation(fields: [categoryId], references: [id])
  color            Color?         @relation(fields: [colorId], references: [id])
  images           ProductImage[]
  ProductSize      ProductSize[]
  reviews          Review[]
  sizes            Size[]         @relation("ProductSizes")
  wishedBy         User[]         @relation("UserWishlist")

  @@index([categoryId])
  @@index([style])
  @@index([gender])
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  ProductSize ProductSize[]
  products    Product[]     @relation("ProductSizes")
}

model ProductSize {
  productId Int
  sizeId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@id([productId, sizeId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  isMain    Boolean @default(false)
  altText   String?
  sortOrder Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Color {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  nameKorean String?
  hexCode    String
  products   Product[]
}

model CartItem {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int
  size        String?
  color       String?
  addedAt     DateTime @default(now())
  productSlug String   @default("")
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Order {
  id             Int         @id @default(autoincrement())
  orderNumber    String      @unique
  userId         Int
  addressId      Int
  status         String      @default("PENDING")
  totalAmount    Float
  paymentStatus  String      @default("PENDING")
  paymentMethod  String?
  trackingNumber String?
  shippingMethod String?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  address        Address     @relation(fields: [addressId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  items          OrderItem[]

  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  size      String?
  color     String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  title     String?
  comment   String?
  images    String?
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
}
